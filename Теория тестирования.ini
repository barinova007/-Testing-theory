ПРИКОЛЬНЫЕ ВОПРОСИКИ:
Анстасия, Назовите пример интеграцтонного тестирования? скажите что имеено имеено вы будете тестировать? и через какие инструменты?

Аустафф - менеджмент на стороне заказчика, на нашей может быть - офис.
Аутсорс - пилим или поддерживаем на своей стороне с нуля на заказчика.
Продакт -


ОТКАЗ ПО - частичная
ЗБОЙ  ПО  - 
Кто ещё не завёл, заведите себе JIRA.
Кто уже с JIRA знаком, найдите как конструировать шаблоны докуменнтов.
Кто выполнял задание по тестированию сайта Banuba и нашел баги, переносите их Jira.

Как оформить чеклист юзабилити?
с юзер сценариями? графика либо пользовательская механика - кнопка нажимаемая.теория 
__________________________________________________________________________________
ЗНАТЬ?
ВЕб сокед - начальное рукопожатие?
аксесс токен? 
Двт токен?
Сколько храниться сейшн стори? пока длиться сессионный период
404 - нот фаунд
500 - интернал сервер эррор
405 - нот элауд 
иттеративная и инкреминтальная модель - предшесвенники
__________________________________________________________________________________
ОБЩИЕ ВОПРОСЫ О ТЕСТИРОВАНИИ: 

Что такое тестирование? 
Это техника контроля качества при котором мы проверяем соответсвие ожидаемого результата и фактического результату
Насколько наш продукт отвечает требованиям.
Можем сделать это с помощью проэктирования тестов, их реализации и анализа, чтобы мы не нашли из после релиза.

Что такое qa qc testing:
QA -   (сокращённо от «Обеспечение качества», квалити ашуренс, он принимае участие в задачах на всех стадиях разработки,
 тестирования документации, ревью кода, внедренпие методик по работе с качесвом. Тестируемый, когда еще нет продкутка)

QC -   (сокращенно от «Контроль качества», что с английского переводится, как «контроль качества») означает процесс проверки качества,
 который обеспечивает соответствие продукта ранее установленным требованиям. Проще говоря, это процесс, который обеспечивает ожидаемое качество продукта.
Действия направленные на: планирование, анализ, составление планов, (квалити контрол предоставить объективную картинку того, что происходит 
с качесвом на разных этапах разработки. Тестируемый продукт уже есть и готов к проверке.)

Тестировщик  - (задача выявить и зафиксировать дефект, завели баг передали на разработчика.
 Тестируемый продукт уже есть и готов к проверке.)

Зачем тестировщику платят деньги?
Во избежание финансовых и репутационных потерь компании.
Чем раньше мы найдём ошибок до пользователя, тем меньше мы потратим времени и денег на их исправление.

Суть работы тестировщика:
Сделать продукт по соответствиям требований заказчика (бизнес),  пользовательских требований и функциональных.

Что такое качество? - Это оценочная характеристика, свойсва насколько наш продукт соответсвкет требованиям, каким требованиям отвечает наш продукт.
Что такое качество по? - ПО соответсвует техническим требованиям удовлетровление требованиям заказчика.
Требования? Откуда беруться? фокус группы, бизнес, требования ожидания наших пол.зователей.
Бизнес требования - на чём зарабатывать?
Пользовательские - какую позьзу этот продукт принесёт? в виде юзер-стори и юзер-кейсы (нпример, хочу иметь возможнгость перевести текст)
Функциональные - как наш продукт должен работать? (как наша кнопка наша будет работать

Баг    — это отклонение фактического результата (actual result) от ожидаемого результата (expected result)
Ошибка – это действие человека, которое порождает неправильный результат.
Дефект - Отклонение фактического результата от ожиданий наблюдателя, сформированных на основе требований, спецификаций, 
иной документации или опыта и здравого смысла.
__________________________________________________________________________________
Верификация и валидация?
Верификация - делаем ли мы продукт правильно? (статичеки без запуска кода) 
(соблюдение всех норм качества и особеностей желания заказчика)
Валидация - делаем ли мы правильный продукт? удовлетровление потребностей клиента (бизнес)
*про самолёт пример: Пример: когда разрабатывали аэробус А310, то надо было сделать так, 
чтобы закрылки вставали в положение «торможение», когда шасси коснулись земли. Запрограммировали так, что когда шасси начинают крутиться, 
 то закрылки ставим в положение «торможение». 
 Но вот во время испытаний в Варшаве самолет выкатился за пределы полосы, так как была мокрая поверхность. 
 Он проскользил, только потом был крутящий момент и они, закрылки, открылись. 
 С точки зрения «верификации» — программа сработала, с точки зрения «валидации» — нет.
 Поэтому код изменили так, чтобы в момент изменения давления в шинах открывались закрылки.

__________________________________________________________________________________
ЭТАПЫ РАЗРАБОТКИ ПО:
1. Требования        - сбор и обработка требований, план, сроки, стоимость
2. Планирование      - составляют спецификации, члены команды знакомяться с строками 
3. Дизайн            - графический дизайн, его уникальное представления, макет локализации, надо тут уточнить для 
4. Разработка        - программисты пишут код
6. Тестирование      - на прогон по функциональным тестам
7. Выпуск            - выпуск продукта.
8. Поддерка          - фитбэк от пользователя.
__________________________________________________________________________________
КОГДА НАДО НАЧИНАТЬ ТЕСТИРОВАНИЕ: 

1. Требования должны быть
1.1.Должны быть зафиксированные.
2. Выполнимыми, атомарность, однозначность, полнота, корректоноть, трассируемость, отслежиумость.

КОГДА НАДО ЗАКАНЧИВАТЬ ТЕСТИРОВНИЕ: 
1. граничные сроки, установленные заранее; 
2. выполнение всех предусмотренных тест-кейсов; 
3. достижение определенного уровня тестового покрытия;
4. когда после определенного момента, мы практически не находим новых багов или критических дефектов;
5. решение менеджмента.
Если конкретный билд, 
Сдали проэкт;
Заказчик не платит;
Эвристика мёртвой лошади – когда смоук не прошёл;
Эвристика «мертвой лошади» - на смоуке не работает кнопочка и не согли перейти на новый 
В программе слишком много ошибок, так что продолжение тестирования не имеет смысла. 
Мы знаем, что все изменится настолько, что сведет на нет результаты текущего тестирования.
Пиньята - после одного бага много посыпалось
Время вышло -
Зашёл в тупик -
Когда на смоке нашёл блокер какая это эвристика? пиньята и мертвая лошадь;
У такого блокера будет - лоу
когда блокер перейдёт в критикал - когда есть обходной путь!
При прогоне критикал паса - ввожу тот же имейл - будет 500 ошибка сервера. В какой части, есои пользователя не 
сохраняет одинаковые имена, ошибка на бэкенде, в SQL - (название таблицы, столбцов, праймери, форен, кей, что я присваиваю айдишке)
- отслеживание на уровне базы данных, а не бэкенд логики - ПАРАМЕНТР ЮНИК (UNIQ)
база ругнётся бэкенду и на клиеент - 500 ошибка.
Как заранее не словить ошибку - по имейлу уникальный пользователь - прогнать через АПИ, через ПОСТМАН.
А если не работает АПИ - а готова база, то через СУБД (открываю через терминал написать запрос) = узнать стоит параметр или не стоит.
Внести ИНСЕРТ - с невалидными данными, тесты на АПИ, а потом тесты на ЮАЙ.
__________________________________________________________________________________
ДОКУМЕНТАЦИЯ:

БАГ РЕПОРТ:
Это задокоментированная ошибка в баг-трекинговой системе.
СТРУКТУРА БАГ РЕПОРТА: (основные пункты и все в целом)?
ОСНОВНЫЕ:
Тайтл   - что? где? когда? что? где? при каих условиях? после нажатия на кнопку (блокер)
Степы
Ожидаемый результат
Фактический результат
НЕ ОСНОВНЫЕ:
Айди
Окружение
Приорити
Северити
на кого заасаинин.
атачмант
версия билда
*если по куликову, то как отображаеться баг: часто или нет сколько раз? 5/5 
Кто ещё может завести баг репорт? Кто угодно, тестировщтк

ТЕСТ КЕЙС:
Набор входных данных, условий выполнения и ожидаемых результатов, разработанный с
целью проверки того или иного свойства или поведения программного средства.
Под тест-кейсом также может пониматься соответствующий документ,представляющий формальную запись тест-кейса.
-шаги,
*В тест-сьюты можно объеденить, а их в чек-листы.
Тест-кейс от баг-репорта? В тест кейсе нет фактического результата!

ТЕСТ ПЛАН:
Документ, описывающий и регламентирующий перечень работ по тестированию, а
также соответствующие техники и подходы,стратегию, области ответственности, 
ресурсы, расписание и ключевые даты.
ПЛАН ТНСТИРОВАНИЯ: что в приоритете, наргрузочное не проводим, нет протребности, 

МАСТЕР ТЕСТ ПЛАН:



ЧЕК-ЛИСТ:
Набор идей [тест-кейсов]. Последнее слово
не зря взято в скобки, т.к. в общем случае
чек-лист — это просто набор идей: идей по
тестированию, идей по разработке, идей по
планированию и управлению — любых идей.
айди, тайтл, ожидаемый, пройден или нет
+шаги вопроизведения, входные параметры, столбик сылка на баг

*Какие чеклисты надо сделать перед релизом? Смоук чеклист, регрессия чеклист.
*Зачем разработчику чеклисты?
Чтобы делать TDD (Test Driven Development) «разработка через тестирование»
*БЛОКЕР когда может стать критикалом - обходной путь 
Блокер  - это ошибка которая не даёт функционировать функционалу, можем выйти в резил с блокерами? надо эту задачу на лида и те на пм
*Какие тесты использовать, чтобы отловить больше багов? Смоук, критического пути,
регрессия, енд ту енд.

Блокер - 
Кейс: сохранить список покупок, но не выходит - северити мажор, приорити 
Кейс: книпка купить нажимаеться, но деньги не списываються - да, блокер, не выполнена бизнес 

Чем северити отличаеться от приорити?
Северити: серьёзность проблемы; бага зависит от функционала, как баг влияет на бизнес логику.
тривиал, мейжор - с одним набором тестовых данных работает, с другим - нет, блокер -  блокирует всю систему, критикал - эсли не работает авторизацию.

Приорити: зависит от того, как быстро надо пофиксить; как баг влиет на бизнес.
Приорити: высокий, средний

Низкий северити, высокий приорити: ошибка в логотипе, грамматическая ошибка
Высокий северити, низкий приорити: функционал бронирования билетов на сайте авиакомпании; если нажать  50 раз на кнопку то приложение падает.
генерация годового отчёта , сейчас июль, до марта фиксить не будут.

критикал северити, низкий приорити

Северити?
Приорити самый высокий? АСАП и Urgent
Приорити самыйй низкий? 

*Для кого пишуться тестовые сценарии?
*Для себя и для разработчиков (для ТDD)

__________________________________________________________________________________
Жизненный цикл локализации продукта:
1. Написание текста-исходника - сбор требований от маркетинга
2. Перевод и редактура - текст проверяют редактора
3. Автоматизированные проверки качества текстов. - этап передачи на инженеров качесва, проверка
4. Сборка - и
5. Скриншоты (Optional) - автотерстерам
6. Тестирование (Screenshots+Build+Testplain) - лигвисты, 
7. BUG FIX - на инженеров
8. Регресс - инженеры собирают
*Чем раньше мы подумаем за локализацию и интернацонализацию, тем дешевле это будет.

*Work around? Это обходные пути.
*Responsive и  adeptive design - Это когда подстройка дизайна.
	
Что такое билд, релиз?
Билд – передаеться от разработчика к тестировщику
Релиз – от тестировщика к конечному пользователю.
______________________________________________________________________________
ЦЕЛИ ТЕСТИРОВАНИЯ:
Чтобы продукт соответствовал ожиданиям клиента;
В заключение вышеупомянутого можно сказать, что тестирование имеет две основные цели:

- Показать разработчику и клиенту, что программное обеспечение отвечает заявленным требованиям. 
С точки зрения клиента это означает, что для каждой функциональности, желаемой с его стороны и записанной в документе требований,       
 проведен  как минимум в один тест (как правило, конечно, больше). В случае общедоступного программного обеспечения то, что в программном 
 обеспечении протестированы  все заданные основные свойства. Соответствующий данной цели тест называют валидацией (проверкой достоверности).
 Успешное валидация указывает, что система работает как надо.

- Найти ситуации, когда программное обеспечение ведет себя ошибочно, нежелательно или не соответствует спецификации. 
Следовательно, поиск ошибок   в этом смысле предназначен для того, чтобы ликвидировать нежелательное поведение системы, как, например, крах системы,
нежелательное взаимодействие с другими системами, неправильные расчеты, поврежденные данные. Выполняющее эту задачу тестирование именуется тестированием дефектов 
(defect testing). Здесь являющийся успешным тест показывает действие ошибки  системы, или, другими словами, находит в  системе ошибку 
(к дальнейшему исправлению которой, и приступают).


ТЕСТИРОВАНИЕ - это техника проверки качества путём сравнения ожижаемого результата и фактического
ОТЛАДКА      - это внесения изменений в код избаление (дебажить): выкотили билд, тестировщик сделал санити, 
скинул на программиста.

__________________________________________________________________________________
ПРИНЦИПИ ТЕСТИРОВАНИЯ:
Принцип №1 - тестирование показывает наличие дефектов, даже если мы их вообще не
обнаружили, то мы не можем говорить о том, что их нет. 

Принцип №2 - исчерпывающее тестирование невозможно.Для того, чтобы минимизировать риски, есть специальные техники тест-дизайна, которые
помогают тестерам проектировать свои тесты так, чтобы с минимальными усилиями покрыть как можно больше
тестовых случаев и функциональностей.

Принцип №3 - это раннее тестирование. Т.е. тестовые активности должны начинаться как можно раньше
и всегда преследовать определенные цели. В данном случае экономия средств заказчика.

Принцип №4 - скопление дефектов. Он гласит так: в небольшом количестве модулей сокрыто большое
количество дефектов. И если мы вспомним с вами правило Парето, то оно применимо и к данному принципу:
80% дефектов находится в 20% функций. 

Принцип №5 - парадокс пестицида. Прогоняя одни и те же тесты вновь и вновь, вы столкнетесь с тем,
что они находят всё меньше новых ошибок, поскольку системы эволюционируют. Проведите аналогию с
применением какого-то химиката против насекомых, либо же каких-то сорняков. Если их постоянно травить
одним и тем же инсектицидом или пестицидом, то у них возникает привыкание, они адаптируются и меньшее
количество живности вымирает, либо уничтожается под действием того или иного токсиканта. 

Принцип №6 - тестирование зависит от контекста. Выбор методологии, техники или типа тестирования
будет напрямую зависеть от природы самой программы. Например, программное обеспечение для медицины
требует более тщательной проверки, чем компьютерная игра. Или же сайт с большей посещаемостью должен
пройти через серьёзное тестирование производительности, чтобы показать возможность работы в условиях
высокой нагрузки. Поэтому тестировщик всегда должен ответственно подходить к выбору той среды, в которой
он будет тестировать, к выбору той документации, которую будет тестировать. Например, если продукт
сложный, то лучше выбрать тест-кейсы, а не чек-листы.

Принцип №7 - это заблуждение об отсутствии ошибок. Каждому тестировщику не стоит полагать, что
если тестирование не обнаружило дефект, то программа готова к релизу. Нахождение и исправление дефектов
будут не важны, если система окажется неудобна в использовании и не будет удовлетворять нуждам
пользователя.
_______________________________________________________________________________
ВИДЫ ТЕСТИРОВАНИЯ: 
*Какие события инициируют регрессию? СМОУК
*Когда не надо делать смоук? всегда делаю смоук!
*В чём отличие видов тестирования и типов? никакой это одно и тоже.
*До СМОУКА что я буду делать? Когда впилили две кнопки? САНИТАРНОЕ тестирование 
(по фиче которая реализована, тестирую ёё и всё прилегающее, по документации и негативными тестами), ПОТОМ СМОУК и РЕГРЕССИЮ, после ПРИЕМОЧНОЕ.
*САНИТИ - проверить смежных областей, добавили две кнопки? функционал с какими модулями он функционирует.
(позитивное и негативными тестами), ПОТОМ СМОУК и РЕГРЕССИЮ, после ПРИЕМОЧНОЕ.

*Когда я не буду делать РЕГРЕССИЮ?	
Когда не прошли смоук. Когда пм уже говорит не делать.«Нет времени, релизим»
Но если если есть время, надо смоук и регрессию.
Если шрифт поменяли, то отказаться - ЮАЙ.

*Когда я не буду делать СМОУК?
Когда мы хотели зарелизить, но функционал не доделан.
Когда пинта и ошибки валяться одна за другой.
После релиза.

Чем СМОУК (по позитивному сценарию) от КРИТИКАЛ ПАСС (разны точки входа и выхода).
Какой СМОУК будет у ЛЕНДИНГА? Рахный.
Может быть СМОУК на 300 сткпов? Такое возможно. 

Когда была new ficha test и это новое не зацепило старый функцтонал.
*Какой вид тестирования в нью фича тест? Модульный, юнит.
*приемочное после регресии.

*В каком случает баг на смоуке, баг северити перейдёт в критикал? - 
баг на смоке будет тривиал? - это ошибка в тексте и визуалка.
*Если кнопка на смоуке тривиал, заводим баг.
*Если на Смоуке нашли баг после, которого не можем перейти на новый этап, тогда останавливаем.
*Обходные пути блокера? Зайти с другого устройства,
*Входные параметры по работе с смоук сценария? Характер - позитивные (те прогоны на которые програма хнает ответы, система знает, что делать)

Уровни тестирования/по объекту тестирования/по степени изолированности:
КОМПОНЕНТНОЕ   - (модульное) фокусируется на компонентах, которые могут быть проверены отдельно. Цели компонентного тестирования
включают,Снижение риска, Проверку, соответствует ли функциональное и нефункциональное поведение
компонентов установленным проектным требованиям, Укрепление уверенности в качестве компонента;
ИНТЕГРАЦЫОННОЕ - тестироввнаие АПИ, на подвиды: одно приложение между собой и между всеми компонентами системы. 
СИСТЕМНОЕ      - 
ПРИЁМОЧНОЕ     -

Связанное с изменениями (Изменения - это ):
РЕТЕСТИНГ -
РЕГРЕССИЯ - старое
САНИТАРНОЕ - смежные функции
СМОУК      - по позитивному сценарию
ТЕСТИРОВАНИЕ СБОРКИ -
КРИТИЧЕСКОГО ПУТИ   -
СИСТЕМНОЕ  -
НОВЫХ ФУНКЦИОНАЛЬНОСТЕЙ - 

По доступу к коду/ по знанию системы
ЧЁРНЫЙ   – просто кнопочки нажимаю (просто кручу руль)
БЕЛЫЙ    – есть доступ к коду, билд собрали есть картинка (внутряночка) 
СЕРЫЙ    – имею доступ не к коду, а к БД, зарегала пользователя на Вебк и проверила,
           трафик посмотрела в Фидлере или в Чарлик (как селект сделать) (поменять колесо)

По исполнителям тестирования:
АЛЬФА -
БЕТА - 

По целям:
ФУНКЦИОНАЛЬНОЕ   - провера функциональности
НЕФУНКЦИОНАЛЬНОЕ - Пользовательский интерфейс, удобства использования, защищённости, инсталяции, конфигурационное, совместимости. надёжности и восстановления,
производительности: +ТЕСТИРОВАНИЕ БЕЗОПАСТНОСТИ - если антивурус основная функциональность.
*если гугл перевёл на другой язык, то не функциональное.
 нагрузочное ( постепенное 10 тысяч пользователей, АТПС, РПС в минутку обработка per second и транзакшион), стабильности, 
стрессовое (резко, + 2000, быстро много, быстро мало, запрос и ответ, запросы от пользователя, как 1-2 пользователя создадут проблему, запустят ДЖиметр, 
история про транзакции), 
объёмное (картинки), 
масштабируемости. 
ЛОКАЛИЗАЦИЯ - адаптация ПО к определенной культурной принадлежности и особенностям культуры языка. (если араб приехал со свой симкой, то в Европе не дать ему 
Это надо предусмотреть, предосмотреть где он? в какой локации.
) Криптовалютные , тиндер, финансовые приложения (платёжные системы), подтягиваеться перевод в форме текста, происходит процесс перерисовки, замениться текст, 
а с сервера прилетит джейсоночка - ключи и данные и раскидаеться по нужным местам.
(перевод кнопок (арабский, где интерфейс с права на лево или немецкий, где длинные слова), верстка, правовые моменты, картинки, жест, календари, цвета, про женщин, контент)
календарь, запрещённый контент, в интенрент: валюта, часы, оплата
ИНТЕРНАЦИОНАЛИЗАЦИЯ - процесс адаптации продукта под другие старны, это когда ставим арабскую локаль во Франции, прижение должно быть готово переключиться 
переключиться на другую локаль. Есть инстаграм - листаю посты, а там есть музыка: данные аудио запрещенна или правообладатель запретил эту музыку не транслировать.
Кому то будет играть музычку, кому -то нет.

 
По позитивности/ по сценарию:
ПОЗИТИВНОЕ – смоук по позитивному сценарию, если система красным засветилась
НЕГАТИВНОЕ – на два раздела: ввела в форму в которой он не должен быть и стала красной.
Второй: ввели, то что нельзя вводить и не засветилась. Система не знала как работать с этими данными

По запуску кода на исполнение:
ДИНАМИЧЕСКОЕ – с запуском кода, Бекэнд, фронтенд
СТАТИЧЕСКОЕ  – без запуска кода, Код, архитектура, дизайн.

По хронрлогии выполнения:
КОМПЛЕКСНОЕ  -
ВХОДНОЙ ТЕСТ -
ОСНОВНОЕ     -
ПОВТОРНОЕ    -
РЕГРИССИОННОЕ -
ПРИЁМОЧНОЕ    - 

По формальности:
ПО ТЕСТАМ -
ИССЛЕДОВАТЕЛЬСКОЕ  -
СПЕЦИАЛИЗИРОВАННОЕ -

По степени автоматизации:
МАНУАЛЬНОЕ     -
АВТОМАТИЧЕСКОЕ -

По разработке тестовых сценариев:
НА ОСНОВЕ ТРЕБОВАНИЙ       -
ПО ВАРИАНТАМ ИСПОЛЬЗОВАНИЯ -
НА ОСНОВЕ МОДЕЛИ           -    

По времени проведения:
АЛЬФА -
БЕТА -
СМОУК - 
САНИТАРНОЕ - соответсвие
НОВЫХ ФУНКЦИОНАЛЬНОСТЕЙ - 
РЕГРЕССИЯ -
ПРИЁМОЧНОЕ -

По степени подготовки:
ПО ДОКУМЕНТАМ -
ИНТУИТИВНОЕ   -

По исполнению сценария: 
ИССЛЕДОВАТЕЛЬСКОЕ ТЕСТИРОВАНИЕ  - это когда мы ЗНАЕМ как работает система, сценарный подходы но не по стандартным тестовым сценариям
AD HOC                          - импровизация на основе своего опыта как может рабоатать это приложения, без наличия,с точки зрения обычного пользователя, без документации, 
MANKEY                          - как 3 х летнийс целью сломать систему, 
Экплоритари                     - вы что-то протестировали и это записали, тестрирование паралельно документированию.

По важности:
СОУК             -
КРИТИЧЕСКИЙ ПУТь -
РЕГРЕССИЯ        -
	
По уровню детализации:
-
-
__________________________________________________________________________________
КЛИЕНТ-СЕРВЕРНАЯ АРХИТЕКТУРА:
*уточнить в общеи и целом или в рамках протоколов нттп

Это такая архитерктура в которой нагрузка есть между сервиром (поставщиком услуг)
и клиентом (заказчиком).
КЛИЕНТ И СЕРВЕР общаються по протоколам (HTTP)
Есть двухуровнывые и трехуровневые архитектуры.
Клиент - сервер; вcё что отправляет запрос, спросить и получить;
Клиент - сервер - БД;

Сервер - это сущьность любая ОВМ которая может отвечать на запрос либо отправляет данные куда-то
взависимости от протокола.
(робот пылесоc)

Клиент отправляет запрос - request;
Сервер отправляет ответ  - response;
*недостатки: если не работает сервер, не будет работать всё остальное;
*преимущество: дублированние кода програмы сервера програмами клиента;

ТОЛСТЫЙ КЛИЕНТ - рабоата на железе клиента, а не на сервере. (1с, онлайн игры)
ТОНКИЙ КЛИЕНТ  - работа на сервере (браузер, програмы)

ВЕБ-САЙТЫ - носят информационный характер, т.е. они состоят из неких веб-страниц,
объединённых друг с другом в единый ресурс, имеют простую архитектуру на основе html кода.
вот веб-сайты, по сути, служат в качестве платформы для предоставления контента для посетителей, они
содержат какие-то текстовые файлы, изображения, возможно музыку. 
Сайты не предоставляют возможности взаимодействия с нашей программой, т.е. пользователи не имеют доступа к размещению своей информации
(кроме как заполнение формы для получения, к примеру, подписки)
Примеры: новостные, кулинарные сайты, прогнозы погоды.

ВЕД-ПРИЛОЖЕНИЯ. В отличие от веб-сайта, веб-приложения - это такие интерактивные компьютерные
приложения, которые специально разрабатываются для сети интернет и позволяет пользователям вводить,
получать и манипулировать данными с помощью взаимодействия. Такие программы имеют очень тесную связь
с нашим сервером и отправляют на него очень много запросов. Такие приложения могут быть встроены в ПО
страницы, либо же сами веб-страницы могут являться приложениями. К ним можно отнести, к примеру, фейсбук,
gmail, youtube, ebay, twitter, различные соцсети. Тот же вконтакте, если взять приложение, используют имя
пользователя и пароль для аутентификации и позволяют своим посетителям обмениваться, например,
мгновенными сообщениями. Если мы говорим о соцсетях, либо же каких-то блогах - создавать контент на основе
пользовательских предпочтений, обеспечивать к нему неограниченный доступ, также там могут быть встроены
какие-то мини-программы для развлечений. И еще одно отличие от веб-сайтов то, что многие интернет
приложения могут не иметь реального информативного содержания. Что же это значит? Т.е. они используются
для выполнения каких-то дополнительных задач, т.е. это могут быть какие-то интернет переводчики,
мессенджеры, конвертеры файлов, конвертеры валют, все, что угодно.

ВЕБ_СЕРВИСЫ - если мы с вами вспомним один из первых уроков, посвященных уровням тестирования, то
один из них был интеграционный, и вот именно логика интеграционного уровня привязана к веб-сервису. Это
прикладной программный интерфейс (API), который работает на сервере и предоставляет клиенту данные через
http протокол, через стандартизированную систему обмена сообщениями. Веб-сервисы, в свою очередь,
подразделяются на SOAP и REST. Вам нужно знать, что в современном сценарии большинство сервисов
предпочитают использовать именно архитектурный стиль REST, потому что SOAP - это протокол, т.е.
 он какойто стандартизированный, а REST - он более гибкий, т.е. нет каких-то строгих правил, по которым мы должны с
ним сотрудничать и его использовать, поэтому он более интересен с точки зрения web-разработки. SOAP
является протоколом стандартизированным и он использует XML (расширенный язык разметки, он очень похож
на HTML). По объёму информации, которую мы вкладываем в SOAP - она намного больше чем в REST, там мы
используем json и объём информации немного меньше, т.е. мы можем здесь сократить время на вот эти все
ответы и запросы на сервер.

веб-сайты      - это некие простые веб-страницы, которые представляют собой информационную какую-то нагрузку, 
веб-приложения - уже позволяют пользователю взаимодействовать с этими разными веб-страницами, вводить свои какие-то данные, взаимодействовать с контентом,
веб-сервис     - это наш какой-то прикладной интерфейс программы, который позволяет различным веб-приложениям
взаимодействовать между собой.

Протокол - это набор правил передачиинформации, т.е.с помощью протоколов
мы регламентируем, как наша информация будет передаваться в сети
интернет.

HTTP протокол (Hyper Text Transfer Protocol - протокол передачи гипертекста) 
- это протокол прикладного уровня, передаёе данные по , и он не защищённый.

между клиентом и сервером бегает текст (предложения, запятые), даже картинки
они в base 64.
HTTPS протокол - защищён протоколом ТЛС.


Модели сетей - OSI и TCP/IP.

Уровни модели TCP/IP; (от низкого в высокому)
1 УРОВЕНЬ - это уровень сетевых интерфейсов, т.е. в данном 
случае передаются какие-то физические импульсы, т.е. 
сюда можно отнести, например, оптоволокно. (Network interface - Ethernet)
2 УРОВЕНЬ - это уровень сетевой, т.е. здесь уже происходит передача 
физических сигналов в виде битов или байтов, здесь уже, например, 
можно выделить такой протокол, как IP. (Network - IP, ARM, ICMP, IGMP)
3 УРОВЕНЬ - выделяют два вида протоколов - TCP и UDP. 
ТСP – надёжный транспортный протокол с ответом, при передаче информации
происходит гарантия, что инфо будет доставлена. (в почтовых сервисах)
UDP - транспортный непрерывный протокол, нет маханизма чтобы гворили, что наша
инфо попала к клиенту либо к серверу (в онлайн играх)
4 УРОВЕНЬ - это application (прикладной) уровень. Это специфический
уровень для нашего приложения. Т.е. уже то, как в нашем приложении 
происходят различные взаимодействия, - это самый последний уровень.
(Аpplication - HТТP, FTTP, Telnet, NTP, DHCP, PING)

Уровни Модели OSI:
1 уровень. Физический (physical). Единицей нагрузки (PDU) здесь является бит. Кроме единиц и нулей физический уровень не знает ничего. 
На этом уровне работают провода, патч панели, сетевые концентраторы (хабы, которые сейчас уже сложно найти в привычных нам сетях), сетевые адаптеры. 
Именно сетевые адаптеры и ничего более из компьютера. Сам сетевой адаптер принимает последовательность бит и передает её дальше.
2 уровень. Канальный (data link). PDU - кадр (frame). На этом уровне появляется адресация. Адресом является MAC адрес.
Канальный уровень ответственен за доставку кадров адресату и их целостность. В привычных нам сетях на канальном уровне работает протокол ARP. 
Адресация второго уровня работает только в пределах одного сетевого сегмента и ничего не знает о маршрутизации - этим занимается вышестоящий уровень. 
Соответственно, устройства, работающие на L2 - коммутаторы, мосты и драйвер сетевого адаптера.
3 уровень. Сетевой (network). PDU пакет (packet). Наиболее распространенным протоколом (дальше не буду говорить про “наиболее распространенный” - 
статья для новичков и с экзотикой они, как правило,  не сталкиваются) тут является IP. 
Адресация происходит по IP-адресам, которые состоят из 32 битов. Протокол маршрутизируемый, то есть пакет способен попасть в любую 
часть сети через какое-то количество маршрутизаторов. На L3 работают маршрутизаторы.
4 уровень. Транспортный (transport). PDU сегмент (segment)/датаграмма (datagram). На этом уровне появляются понятия портов.
Тут трудятся TCP и UDP. Протоколы этого уровня отвечают за прямую связь между приложениями и за надежность доставки информации. 
Например, TCP умеет запрашивать повтор передачи данных в случае, если данные приняты неверно или не все. Так же TCP может менять скорость передачи данных, 
если сторона приема не успевает принять всё (TCP Window Size).
Следующие уровни “правильно” реализованы лишь в RFC. На практике же, протоколы описанные на следующих уровнях работают одновременно на нескольких уровнях модели OSI,
поэтому нет четкого разделения на сеансовый и представительский уровни. В связи с этим в настоящее время основным используемым стеком является TCP/IP,
о котором поговорим чуть ниже.
5 уровень. Сеансовый (session). PDU данные (data). Управляет сеансом связи, обменом информации, правами. Протоколы - L2TP, PPTP.
6 уровень. Представительский (presentation). PDU данные (data). Преставление и шифрование данных. JPEG, ASCII, MPEG.
7 уровень. Прикладной (application). PDU данные (data). Самый многочисленный и разнообразный уровень. На нем выполняются все высокоуровненвые протоколы.
Такие как POP, SMTP, RDP, HTTP и т.д. Протоколы здесь не должны задумываться о маршрутизации или гарантии доставки информации - этим занимаются нижестоящие уровни.
На 7 уровне необходима лишь реализации конкретных действий, например получение html-кода или email-сообщения конкретному адресату.


Из чего состоит вообще http протокол:
1. Основная часть -полезная нагрузка, payload, т.е., по сути, это то, что мы вообще должны передать,
Можно передавать картинки, можно передавать какой-то код, т.е.
все это также может быть зашифровано в нашей основной части.
2. служебная информация header, либо заголовки. Это служебная информация, т.е. 
здесь уже описывается то, как наша основная часть файла должна передаваться
3. из методов.

ip - интернет протокол                          
443
http://лл                              http://оо
32.54.112.203:5012 - это железяка     32.54.112.203:5020 (порты подключены под интернет протоколу)
Дом на улице Мира, 22 - это IP
у дома есть подьезд - и это его порт 
домофон 120 - APi  
квартиры это - эндпоинты, точка касания в АПИ.
при запросе юзер регистратион, начинает собираться нттмл текс странични регистрации, сервер собирает 
нттм и ссс формирует в рест и в респонс и отпрввляет клиенту.
Движок знает как работать с этим файлом (парсит) 

реквест методом пост
респонс - методом гет

если нажали регистрейшн - это пост, забираем емейл, спрашиваем у базы селект*фром юзерс имейл (и тот имейл
то ДБ отдаст ответ.)
Сервет по логике ответит, что "такой пользователь уже есть")
снова регистрируем, на сервер, сервер к БД, БД говорит всё ок.
Пользователь создан.
по логину - Идентификация
по паролю - Аутенфикация
авторизация - предоставление доступа к данными.

летит запрос через 5020 порту в сервер АПИ


Из чего состоит request: у нас указывается метод, далее идет версия нашего протокола, хост машина, т.е.
там, где вообще находится наше приложение, т.е. это наш сервер. Также в request у нас содержатся headers
(заголовки), как я уже сказал, это некая служебная информация, которая характеризует нашу основную часть.
Она как может быть, так может и не быть, они могут отличаться в каждом отдельном request. Также в первой
строке может содержаться URL, т.е. то, к какому ресурсу мы обращаемся.

Из чего состоит response: то здесь у нас также содержится информация о версии
протокола, также содержится status code, который говорит об успешности того, как отвечает нам сервер. Каждый
status code имеет цифровое обозначение и текстовую информацию. Дальше у нас содержится дата, когда
вообще был отправлен ответ от сервера, информация о сервере и также какие-то хедеры, которые
характеризуют нашу основную нагрузку. Также здесь обычно ставится пустая строка и, если наш ответ содержит
в себе какую-то полезную нагрузку, то дальше идет информация именно с этой полезной нагрузкой. Например,
документ в формате html




__________________________________________________________________________________
МЕТОДЫ HTTP:
Абревиатура - КРАТ 

GET     -  залогиниться в УРЛ, иденпатентный (повторное дейсвие не изменит результа), нет тела запроса, 
           кешируеться в адресной строке УРЛ  2048, есть ограничения,
           клиент просто отправляет какую-то информацию, запрашивает ее от сервера. 2048 символов.НА КЛИЕНТЕ СОХРАНИТЬСЯ, 
           а именно это закешируеться,почищу историю браузера. (местоположение, скл запрос, якори)

POST    -  (форм дата) не кешируеться (если не прописать), для добавления инфо, есть тело, класть на сервер,
            отправка полезной нагрузки на сервер;

PUT     -  обновление, изменение

DELETE  -  удаление данных с нашего сервера,
           либо с сервера базы данных

Какие идемпатентный какие нет: 
идемпатентный - Гет, делит удалить что уже удалили 404, пут обновить, тоже постоянно обновить.
пост - создавать
если при одном и том же запрос с теми же параметрами - ничего не меняеться, то иденпатентный. 
Иденпатентные - все кроме ПОСТ.

*GET, Head, Options - безопастные методы для сервера, потому что кешируетьмя
безопастность состояния сервера: ты ничего не изменишь, 
а у Поста - изменишь, ты добавишь сущьность.
для клиена - кешируетьмя , видно в урсле/не видно.
Опастные - пут, пост, делит.

РОST - для пользователя, потому что не кешируеться.
GET, Head - по рекомендациям нельзя возвращать 405 ошибку.

Метод HTTP является безопасным, если он не меняет состояние сервера. 
Другими словами, безопасный метод проводит операции "только чтение" (read-only). 
Несколько следующих методов HTTP безопасные: GET , HEAD или OPTIONS .

Надо протестить андроида траффик - через Чарлик, манифест и надо чтобы разработчик вписал
тебя.
__________________________________________________________________________________
Статус коды: - ответы на твои запросы, сервак знает код
потому что сервер, уже запрограмирован отвечать статус кодом, своему клиенту.
100 - информационные какие-то сообщения,
200 - сообщения об успехе операций, 
300 - сообщение о перенаправлении, 
400 - ошибки на стороне клиента, 
500 - ошибки на стороне сервера. 

404 - какую страницу должны сделать разработчикам, но не сделать на 
неё ссылку.

HTTP       -  отпрвляем запрос и получаем ответ.
WEB-SOCKED -  мы отправляем запрос и дальше сервер нам постоянно отправляет ответы.
              Связь между серве клиент по протоколу.
              Чтобы глянуть ответики, которые шлёт веб-сокед в Девтулс и Чарлик.

URL (Uniform Resource Locator) - это уникальный адрес сайта в
сети, который определяет его местонахождение в сети интернет.
URN - это неизменяемая последовательность символов, определяющая только
имя некоторого ресурса.
URI - наш какой-то уникальный идентификатор, это обобщенное понятие 
множестваидентификаций нашего ресурса, которая включает как URL, 
так и URN, и может включать их по отдельности, либо же все вместе

IР - Интернет протокол, особености маска и порт (192.168.) - диапазон 0 до 255

IP-адрес - это уникальный сетевой адрес узла в компьютерной
сети, построенный по протоколу ip.

Идентификация - по логину
Аутенфикация  - по паролю
Авторизация   - доступ к данным

*Есть много браузеров, почему важно тестировать в разных браузерах?
__________________________________________________________________
POSTMAN:
Окружение - для того чтобы сохранить и не вводить по многу раз.
когда надо что-то скрипт отработал - кнопка ран.
Как я тесты отпарвлю на гистхаб? 
На рабоате надо получить? дать свой гит ключ ссш, а именно 
есть ветка - мне надо ветка разработчика 
гит чекаут название ветки и интер - перейдем в ветку и клонирую.
разраб мержит - я в ветке мастере.

От для того чтобы тестировать АПИ.
Там есть раннер - чтобы написать скрипты и автоматически гонять раны.
Для начала создать коллекцию -

Зачем окружение в Постмане?
чтобы создать набор переменных, которым можно присвоить значение и использовать при работе
и ещё запросы могут передавать данные в окружение и другие запросы эти данные будут использовать
*ну вообще смысл в том чтобы тесты писать универсальными, 
и если тебе что-то изменить, то ты меняешь в окружении, а не в каждом запросе отдельно.

Могу ли я Фидлером заменить ПОСТМАН? нету авто рана.
__________________________________________________________________________________
DEVTOOLS:
В какой вкладке Девтула посмотреть трафик веб-проэкта?
в Нетворке? там НТТР запросы
*В Мозиле можно перехватить трафик и подменить.
Адаптивный - если резко то адаптив., выбрать настроить разрешения экрана.
Респонсивный - двигать экран, если плавно то респонс.
Работа с разными скоростями интернета (2дж,3жд, отключить интернет)
Где изменить GPS? вкладка 
Хедеры где смотреть? Заголовки в укладки нетворк
Куки где смотреть? Апликатион, сторедж, локал и сейшнс сторидж - они дают 
кеш от куки отличаються:
Куки - юзерские насттройки, 
кеш -  серверные. на жёсткий диск и тот и то временные файлы. 
в консоле? 
в нетворк? логи
Мобайл респонсив, надо проверить версию на мобилке и на десктопе? какое окружение, в каких версиях будет работать? 
что популярно у юзеров моего приложения?
Хедеры реквеста? тайп, сервер, окружение, метод, 
что в хедере юзер агент?
__________________________________________________________________________________
ТЕХНИКИ ТЕСТ ДИЗАЙНА:
ЭКВИВАЛЕНТНОЕ РАЗБИТИЕ КЛАСОВ - разбить на диапазоны
Рассмотрим ситуацию. Мы пишем модуль для системы отдела кадров, который определяет, в каком
порядке нужно рассматривать заявления о приёме на работу в зависимости от возраста кандидата.
Правила нашей организации таковы:
● от 0 до 16​ - не принимаются
● от 16 до 18​ - могут быть приняты только на неполный рабочий день
● от 18 до 55​ - могут быть приняты как штатные сотрудники на полный рабочий день
● от 55 до 99​ - не принимаются​*
таким образом, мы проведём 4 теста - 10, 18, 35, 75;
Тестирование классов эквивалентности в равной степени применимо на модульном, интеграционном,
системном и приемочном уровнях тестирования. Все это требует входных или выходных значений, которые
могут быть разделены на основе системных требований

ГРАНИЧНЫЕ ЗНАЧЕНИЯ - разбить на диапазоны (от 21 до 28) + граничные даты (28,29,30)
Обратите внимание на проблемы на границах - это "края" каждого класса.
В этом примере интересными значениями на границах или вблизи них являются {-1, 0, 1}, {15, 16, 17}, {17,
18, 19}, {54, 55, 56} и {98, 99, 100}. Другие значения, например {-42, 1001, FRED, %$#@} могут быть
включены в зависимости от предусловий документации модуля.
Тестирование граничных значений в равной степени применимо на модульном, интеграционном,
системном и приемочном уровнях тестирования. Для тестирования граничных значений требуются входные
значения, которые могут быть разделены на классы и границы, которые могут быть определены на основе
системных требований.

ТЕСТИРОВАНИЕ ТАБЛИЦ ПРИНЯТИЯ РЕШЕНИЙ - Таблицы решений представляют собой комплекс бизнес-правил, 
основанных на заданных условиях. Основная форма: Условие и правило.
Компания по автострахованию дает скидку
водителям, УСЛОВИЯ = которые состоят в браке и/или хорошо учатся
ПРАВИЛО = "Да", "Да", "Нет","Нет".
ДЕЙСТВИЯ = СКИДКА 60%, 50%, 40%, 30%
*каждое правило (вертикальная колонка) становится тест-кейсом.
Условия указывают на входные значения, а действия - на ожидаемые результаты.
Тестирование таблиц принятия решений может быть использовано, когда система должна реализовывать
сложные бизнес-правила, когда эти правила могут быть представлены в виде комбинации условий и когда
эти условия имеют дискретные действия, связанные с ними.

ПОПАРНОЕ ТЕСТИРОВАНИЕ - техника комбинаторики
ПРИЧИНА И СЛЕДСВИЕ (переходы) -
ПРЕДУГАДЫВАНИЕ -

__________________________________________________________________________________
МОБИЛЬНОЕ ТЕСТИРОВАНИЕ:

Виды мобильного тестирования:
1. УСТАНОВКА ПРОГРАМЫ - с нуля, обновить, новую версию удалить, поставить старую версию-удалить, 
сохраниться ли прогресс после обновлений, +покупки из платного контента -УДАЛЕНИЕ-УСТАНОВКА-ПРОВЕРКА ОБНОВЛЕНИЙ
Уточнить какие оси ОП задействованы? напримео 15.1.1
Кейс установки мобильного приложения:
Чему дллжно соответствовать моб приложение перед релизом? Проверить лигал по безопасности? гайдлайны.
разные оес, пуши, пририывание, обновы, фейс айди, поворот экрана
подтвержение смс транзакции - автоматическая, предоставить доступ присылать сообщения, сенсоры, фотик, блокирование экрана.
2. ПРЕРЫВАНИЕ - пуши, звонок, сел заряд, будильник, подключение гарнитуры, включение фронтальной камеры, GPS, 
карта памяти отключилась, горизонтальное и вертикальная раскладка, сворачиванеи
3. РЕКОННЕКТ - работа с 3 дж, 5 дж, вайфай, маршрутизатор, смена симок, переключение между вышками, работа в фоновом режиме.
4. ДОГРУЗКИ - какое событие вызывает догрузку, а в это время сел телефон, вай фай или моб интернет.
5. ПОКУПКИ - Будут ли отображаться прогресс из бесплатной версии в платной? а  если подписка закончилась не хватает денег на карте? 
если на карте нет денег, прийдет оповещение?
надо проверить трекнуть и ему вернёться ему всё то, что было до оплаты?
Платёжные системы, вернуть деньги (РЕФАН)
6. АУТЕНФИКАЦИИ - почта, палец, фейс айди (как обмануть фейс айди - напечатать лицо), соушил логин, по номеру телефона, в приват есть: один раз регаешься и один пароль для всех,
по кьюар коду в вайбере, секретный вопрос.
7. ВАЛИДАЦИЯ НА ЧЕЛОВЕКА: выбрать самолёты, роботы. 
8.ТРОТЛИНГ (чего?) торможение сети - менять нестабильное приложение, запросы на обновление ленты.
8.1. ТРОТЛИНГ ПРОЦЕССОРА - грееться, приложухи медленно, Почему это важно? ПЕРОМЕТР - померять это дело.
Зачем проверять СКОРОСТЬ НАГРЕВА? чтобы понять как, денатурация белка 42 градуса, чтобы снизить нагрузку (понизить тактовую частоту - тротлить)
Понимать средние ткмпературные режимы. В чехле или без чехла.
8.2. ПРОВЕРКА ПРОИЗВОДИТЕЛЬНОСТИ - ФПС,какие девайсы какие чаще используються у конкурентов у Вас.
9. СНИФИТЬ - (нюхать трафик, перехватить поменяю и отправлю) зайти в нетворк, там увижу, что происхолит с нттп запросами. (прокси включить, ИР указать, режим разработчика включить, доверять
дейсвиям, подкючиться к той же сети, включить сертификат, траффик пустить через прокси)
Галочку поставить - чтобы отклавливать траффик со всех хостов (*.*)

10. Если приложение спршивает дотуп к контактам? к камере? микрофон? - отдельно проверить
11. ОРИЕНТАЦИЯ - Что происходит когда меняеться ориентация? перерисовыеться графика, страрый экран в новом расположении.
Каждая последующая кнопка, все экраны удаляються, и прорисовка экранов поновой.
Когда не надо переворачивать? всегда надо чтобы проверить как сработает в портретном и горизонтальном.
как работать приложухе когда ты лежишь? Инст только - вертикально, кроме видео;
Гайдлай - сейзон (как размещать), 
кнопочки, чтобы попадали пальчики.
Ретина или ретина 
Строка состояния 
А должен ли он отрисовываться горизонтальный/портретную?
Как себя поведёт если перейдет из портретного в альбомный.
мобильные игры - только горизонтальные, кейс. когда тел в вертикаль, кейс = и там и там она должна открыться горизонтально.
при отключенном кнопке ориентации - всё равно включиться горизонтально.
при прерывании., перевороты переложения, на 180, 360 а если лежишь.
как отрабптывают тесты с героскопом.
12. Тач айти - на задней крышке, У Андроида - три кнопки, У Аййос - одна/свайп вверх.
13. КАК ПОНЯТЬ НА ЧЁМ ТЕСТИРОВАТЬ? уточнить как платформа? аййос. регион? говорил за целевую аудиторию? на последних версиях, чекнуть статистику какие юзают устройсва.
важно чтобы не эмулятор или симмулятор, но важно чтобы. добавил устройство, надо пересобрать билд. *можно в тестфлайт на аййос - группа внешних тестировщиков, но они увидят приложуху через сутки.
14. ЛОКАЛИЗАЦИЯ - включаем украинский, как тестировщик я не смогу скзать о правильности перевода, проверка языка контора перевода (например, водоотливной профиль)
Если выкупаю, что пропущено слово: то проверить вёрстку, может слово улетело в Тайгу, цвет слился, запрос на сервер
15. ФОТО. Скан карточки через фотик и возможность пересылать денюжку .

ВИДЫ МОБ ПРИЛОЖЕНИЙ:
ГИБРИДНОЕ           - как и нативные, одна кодовая база на Джава Скрипт., 
ВЕБ                 -
НАТИВНЫЕ            -  под одну операционную систему (свифт - аййос), (андроид - котлин) 
*Это надо учитывать - У Андроида - три кнопки, У Аййос - одна/свайп вверх.

ГАЙДЛАЙНЫ:
У Апл безопастность, не пустят на апп-стор.
Эплов судили, что они они вкрутили только стои системы оплаты, а не все. 
И теперь они запрашивают сертификацию, чтобы платёжные системы заходили.

Как поодобрать мобильные девайсы для тестирования?

*фризиться
*докачка в режиме уже скаченного приложения.
*мобильный интернет или вай-фай - чтобы запрос был, через приложуху.

Операционная система 
Мониторы - тач мониторы
Температурный режим - 
установка  - скачать из облака определённого
тестирование кейсов гайдлайны - ios, android

Система оплат 
NFC   - виртуальная карточка, как рамплачиваться;  
Прерывание, пуши    - 
Гайдлайны - про жесты; 

*Пуши - способы через что они могут быть доставлены - сервисы пушей офлайн, и бэкенд не может достучаться, и когда онлайн - напрямую пуш идентификацию;
__________________________________________________________________________________
ANDROID STUDIO

__________________________________________________________________________________
ЧАРЛИК
Мапинг -затормозить траффик 

__________________________________________________________________________________
ТЕСТИРОВАНИЕ ВЕРСТКИ:
Верстка - процес создания страниц; Дизайниер создает картинку, верстальщик фронтенд дев - верстает сайт, тестировщик проверяет на валидность всех требований.
чеклист верстки: соответсвие макету 1:1 - тул Перфект Пиксел
кроссбраузерность - 
Мобильные устройства - через дев тулы
Валидность кода - проверка разметки WЗС
Скорость загрузки - быстрый интернет делает мир дыстрее
независимость блоков ССС - каскадность, если НТМЛ - это скилет, ССС - это мускулы.
Структура каталогов в верстке - Джава скрипт, НТМЛ, ССС.
а/b тесты

__________________________________________________________________________________
СОЦИАЛЬНЫЕ ЛОГИНЫ:
через гугл, соц степени, через яблоко
Факторы Аутенфикация? ЭТО аут 2.0 - когда мы доверяем свою регистрацию на доверенное приложение оно редиректид на соц сети.

Кейс: есть несколько пейволов/кошельков: какие варики оплаты нашего сервиса какие не надо тестировать? 
все надо проверить оплаты, мир разнообразен, и никогда не предугадаешь
Какие кейсы оплаты: проверки платного контента на мобилку? Будут ли отображаться прогресс из бесплатной версии в платной...,
откат, пересчёт, если подписка закончилась? если на карте нет денег, прийдет оповещение, надо проверить трекнуть и ему вернёться ему всё то, что было до оплаты.
Кейсы оплат: через яблоко вернкться платный контент,  у андроид - нет.
*нельзя пользоваться попарно? потому что надо всё проверить.
на ютуб если что тм пишет - поменяйте способ оплаты.

Кейс Тест на плптёжную систему:  карта с маской (виза и мастер карты), какую карту мы скинем, не верный код? если выбрали визу, но начали? по сроку не валичное время:
будущее, ждформат даты, что за чем? дроб даун? экспандиться или нет? Спецсимволы? пробелы? Колёсико? сиви код? чего-то не нажали? код с мобилки прислали подтверждение?
Есть контактные данные саппорта.

__________________________________________________________________________________
СТОРИДЖЫ:
Кукис сторидж - 
Кеш сторидж -
Локал сторидж - 
Кейс: Добавили товары в корзинку, закрыли, а они подтянулись в другой раз? По токену и 
локальный сторидж сохраниться.
Кейс: дать надо челлику корзину, когда он обновил браузер, и надо ему даь его корзинку с товаром? 
Через логин, а корзина сохраниться на серваке в базе. Почему они так делают? по протоколу Нттп спроить/трекнуть историю браузера.

Где храниться токен? на сервере в оперативной, тут будет быстрее (жосткий диск, ссд диск), 
кей велью сторидж (такую структура какая база
будет иметь не реляционная)
Почему плохо хранить данные на оперативке? если список висит на оперативке и оперативка под 220 вольт,
пока сервер включен, если выключен, то там снято напряжение.
__________________________________________________________________________________

__________________________________________________________________________________
APLICATION PROGRAM INTERFACE:
Что такое API? 
Это програмный интерфейс, который позволяет взаимодействовать приложениям без влияния пользователя.

Зачем нужен АПИ? ПИ для того чтобы проги были надёжнее, отдельные компоненты, натсройка связали
между програмами.(авиасейлс - сайт агрегатор, календарь, погода, кнопка авторизации)
Иногда через апи зарабатывают (погода)
Веб-сервисы - прога котрая организовывает взаимодействие: интеграция процессов без участия людей.
Разница между веб сервисом АПИ и АПИ.
Рест - Репресентейшн стейт трансфер - это архитектурный стиль, определяет как компоненты должны между собой взаимодействовать,
по запосу и ответу.
URI? Ресурс это ключевая абстрация некой сущности (клиенты, заказы клиентов, товары)
Эндпоинт URI - конечная точка, последовательность символов.
АПИ состоит из ендпоинтов - (точки касания) у каждой точки касания есть свой урл.
/client
/client23 - какой клиент
/clietn/4/orders - клиент
принципи РЕСТ: 
1. клиент-сервер: отделяем клиентский сервер от пользовательского.
4. единобразие иньерфейса
5. Слои (одни компоненты не видят другие)
6.Код по требованию.
JSON:
всё в кавычках
только текст
велью может быть без кавычек - 
другую джейсоночку могу ввести в другую
могу ли я? в качесве велью вставить хмл, делаю кавычки.
хмл может быть ключём в джейсоне ( в кавычка)
В чём можно ещё создать ключ? - только стринг, когда они переформатируються;
Схема json - ключ=значение.
джейсон от хмл отличаеться? хмл - теговая, может быть с открытой тегой, закрытая, джейсон - 
аштмл - язык разметки ОТ хмл - у хмл - расширяемый формат данных 
Aplication program interface – как между собой общаются клиенты сервера с другим сервером = через протокол нттп.
сервера черзе интернет - по нттпс
если програма - апи по нттп
если спецсерверы - там свои протоколы;
АПИ - это не обязательный атрибут, если нет общения.
Как тестировать API? 
через Постман и Сваггер (покажет описание апи). Сравнивать ответы по чек-листам.
Статус код проверить
Сравнить запрос/ответ
из массива достать элемент
Схема json - ключ=значение.
Запросы я отправляю в ендпоинт (регисирация, отправка, ссылка), а сервер отвечает реквестами.
Из чего состоит АПИ: протокол, адрес из ендпоинтов
Специфический кейсы: для всех веб сервисов, хмл или джейсон, = изменение формата данных. Типы данных для джейсона: булевный, стринговый
__________________________________________________________________________________
РЕСТ 


СОАП 
__________________________________________________________________________________
ПРОКСИ И ВПН:
Как взять и сделать чтобы мой браузер слал трафик не на прямую, а через прокси? ВПН браузерный 
(только то, что открыл, будет тянуть трафик)  и стацтонарный (весь трафик через комп, месенжеры)
Механика Прокси сервера? Изменить айри Промежуток между Клинтом и сервером; 
Клиен попадает на прокси, а проски отправляет через свои каналы на сервер; 
и таким образом мы обходим обойти и проверить локализацию.
КЕЙС: Если баг на фронте, то возьму логи из консольки, тким образом: логи и сейв файлс.
Как посмотреть что улетело на бэк? боди реквест надо увидеть в вкладке ""
Как в Сафари включить Девтулы?
прокси это часть впн:
ВПН - виртуал прайват нетворк.
Суть ВПН? зашифрованые данные, ставим локал германию, а он отправляет на сайт отвечает на сервер, 
сервер зашифровал и вернул тебе.
Прокси может существовать без ВПН, ничего не шифрует.
Если надо получить какой-то сайт можно, но этот запрос не будет шифрован.
__________________________________________________________________________________
CONTENT DELIVERY NETWORK:

 
__________________________________________________________________________________
SCRUM:
Чем заканчиваеться Скрам? Новым билдом/, который можно показать, (отладка того, что не работало).
Фреймворк - это рамка + работа
Миттинги? 
В начале спринта происходит церемония под названием - планирование спринта.
На этой церемонии (всей командой) определяются задачи, которые пойдут в текущий спринт - спринт беклог (из продуктового бек лога(общего))
И задачи в течении спринта уже берутся из спринт беклога (но надо помнить о том, что бывают ситуации,
когда в спринт могут попасть задачи из продуктового беклога).Спринт беклог может менятьсяся.

__________________________________________________________________________________
GIT BASH: 
Сисиема ослеживания версий.
pwd                 - посмотреть, где я
ls -la              - показатьсписок содержимого в папке
mkdir               - создать папку
cp                  - скопировать от куда? что? / куда? что?
cd                  - открыть папку
сd ./               - зайти в родительскую директорию
сd ..               - родительская папочка
mv                  - перемещение /откуда и куда/   
vim                 - открыть для редактироапния         
grep                - в реальном времени
head                - голова
tail                - хвост
date                - дата и время
less                - просмотреть содержимое длинного файла
git clone           - скопируем свой репозирорий на локальный компуктер
git add             - добавить файл для отслеживания
touch f_1.txt       - создать файл     
git status          - показать состояние проекта, чекать что отслеживаеться, а что нет.
git add             - добавить файл для отслеживания, трекнуть изменения
git add .           - отслеживать ВСЕ файлы, которые не отслеживали ранее
git commit          - команда для записи изменений в репозиторий Git
git commit -m       - команда для записи индексированных изменений в репозиторий Git "сообщение"
git push            - отправить изменения на внешний репозиторий
vim f_1.txt         - редактировать
git commit -am      - команда для записи изменений в одну строчку (отслеживание и сообщение)
git fetch           - проверяет есть ли изменения на ВНЕШНЕГО репозитории
git pull            - используется для извлечения из ВНЕШНЕГО репозитория, если аишет олреди ар тудей, то всё сочитаеться.
git branch          - глянуть на какой мы ветке
git branch Postman  - создать новую ветку
git checkout Postman - прыгнули в эту ветку, создали файл, он есть
git checkout main    - вернуться на главную, а там файлика нет
git merge Postman    - чтобы
remove               - удалить



SSH - ключ,чтобы показывало все скрытые файлы; ssh-Keygen -t rsa -C "barinova007"
в папке ssh (там будет файл, паб - и там скопировать)
идем в настройки - там в колоночке ссаш - в кей скопировать тот ключ.
иду в гит баш,создать папку по тест снн - и туда гит колоночке

git merch (мержить) - когда маленькие кусочки в основную вестку
смысл - есть прод, есть тестовый стейдж, и есть дев
билд - стоите, сбилдилась - в тест в сервер
дальше на прод.

git branch - покажет все ветки
git branch apple pay - создаст новую вестку
git checkout apple pay
touch pay/
git chec

КАК ИГРАТЬ С ВЕТКАМИ:
Если челлик просит протестировать вертку.
Спрошу какая ветка.
Скопирую ее себе
Протестирую, а потом мне надо как-то собрать приложение.
Нам надо АПК файл и через АДБ ставлю.
__________________________________________________________________________________
SQL:
юнион - снизу, надо чтобы равное кол столбцов т одинаковый тип данных, вертикально соединяет, одинаковые столбики!
джоин - ОН, ключ и тип данных чтобы совпадал, реляция не важна для него, горизонтально соеденяет.

Релляция:
это взаимоотношения по ключам (праймари и форен), зачем нужна релиция? что дают реляции между табличками? 
чтобы была взаимосвязь
Мы при релиции обращаемся к родительской папке, если такой ойти есть, то он даст положительный ответ, если нет,
то ответа не будет. И лишняя информация не пройдёт.

Каскадирование:
принцип домино, одно действие запускае другое, тригером действует как удалил родительский элемент и удалил и дочернее. 

по убыванию
по возростанию? без ар
Как вывести людей от 1000 до 2000: селект фром где одна Таблица
как вывести людей котрые живут в Москве и в Питере: селект через ОР (или)
вывести всех сотрудниц у которых зп от 1000 до 2000, которые попали в контору после 5 декабря 2020 года:
слект*фром емплаис салери 1000-2000 вере гендер=Ж, вере сити москов ор питер.
Про джоины: иннер, лефт джоин, райт джоин, фулл
Джоин - горизонтально
Иннер -
Лефт - 
Райт - 
фуулл-
Юнионом - как соеденить? вертикально соединяет, одинаковые столбики!
Кросс джоин (юнион) - перемножает все данные., селект*фром 1,2;
Как кампуктер поймёт где левая и где правая? 
что должно быть одинаковым? 


Тип данных должен быть чтобы их сматчить.
например: если у нас есть такой емейл есть в бд, то такой челлик зайдет в базу (регистрация), а если нету, 
то регистрация не пройдет, потому что нет.
Как обьеденить два запроса без джоина? 
*Каскадирование? - 
Гроуп бай? за ним идет Хевинг.
ЮНИОН (без дубликатов) и ЮНИОН ОЛЛ (всё)
СЕЛЕКТ - то всё скажет.
Телефоны - Телефизоры и отдельная талица с названиями фабрик. = вывести все Селект* джоин  он 
(ТВ.манифактору = манифактори нейм.айди) юнион олл для другой таблички.

есть МуСКЛ и ПостСКЛ - какой параметр инкреминировался пвтоматом подставлялось 
автоматом - автоинкремент мускл, а в пост - СЕРИАЛ.

СУБД - системв уп базами данных
БД - база данных
__________________________________________________________________________________
Чем Андроид отличаеться от Яблоко?  

Андроид - нельзя откотить, пишут на Котлин, есть сенсорные кнопки, открытая  количество процессоров, открыта и закрыта ОС;

IOS - можно откотить, пишут на Свифт, нету сенсорных кнопок,
__________________________________________________________________________________
Чем Линукс отличаеться от Виндовс? 

Кейс: не сработала кнопка «расплатиться»
Во первых, узнаю есть ли у клиента интернет.
Перзагрузить комп
Перейдите в другой браузер
Какой товар покупаете?
Может нет авторизации?
Пойти к бэкенду попросить логии и узнать, что делал этот клиент на магазине.
Воиспроводить у себя на кампуктере.
Баг-репорт завести
Заасайнила на разработчика.
Попросить саппорт, чтобы они связались с клиентом и проследить получилось ли у клиента.
Почистить кеш и куки.

Кейс: если ты один тестировщик на проэкте?
1. исследовать ad-hoc.
2. Смоук
3. Критикал пас
4. Анд-то-енд
5. Регрессия
6. Написать чек-листы  по: смоук, критикал пас, анд-то-енд, по регрессии.

Кейс: форма, 4 поля регистрации, и одна кнопка зарегаться, в БД заходит только 3 поля!
узнать что за форма? спросить обязательно ли оно.
Зашла в Девтулс сомотрю как там отрабатываеться.
1. Валидация на фронте и бэке различная, на фронте ок, на бэке не ок.
возможно на фронте не прописано, что это поле обязательно;
2. Метод не тот.
3. Зайти в Чарлик
4. Пойти к фронтенду - проверить , возможно не прописано АПИ, узнать требования - может она там не нужна.
Что формируеться на фронте перед тем как отправиться - джейсоночка запрос-формируеться и должна полететь на бекэнд, 
но в этой джейсоночке ошибочка (там есть дава параметра, куда ложить и что ложить, КЕЙ и ВЕЛЬЮ)
 (велью дата, массив)
 5. Проблема в ВЕЛЬЮ - там пустое значение; ключ есть, а велью пустое.
 6. На этапе отправки джейсоночки (АПИ) - если Постом ок, если Гетом - нету. Ендпойнты АПИ - точки входа, УРЛы, куда шлют запросы. Бэк написали новый эндпойнт 4 поля, а фронт - 
 шлют запрос, где обрабатываються 3. Надо обновить фронт.
 7. На бэке забыли допичать, чтобы кидало с 4 строчки: посылаеться с фронта но на бэке не обрабатываеться.
 8. спарсили на бэке, но на фронте не отображаеться.
 9. С БД на бэке, как писать запросы? СКЛ - ИНСЕРТ что-то там и полетело в БД. Через ORM? не прямо, а фреймворк. 

Кейс: Два значения улетает в одно поле, нейм и ласт нейм.
Кейс: Тестируем КНОПКУ.
Какие обязательные? все
Форма регистрации по времени:
дата?
Время? час? минуты?
Латиница? или Кирилица? спецсимволы? пробелы? (не надо, это логично)
Индитификационный? - колличесво
пустые - нажала, увидела реакцию
все - нажала,валидно, увидела новую станицу, логика прописана

__________________________________________________________________________________
ТЕСТИРУЕМ:
Кейс: залогиниться новому пользователю.
логинимся.
В клиент серверной архитектуре происходит: 
Респонс на сервер постом, сервер на БД,БД - отвечает, сервер начинает собирать респонс,
в РЕСТ (НТТП и ЦСС), кидает в урл. Открывает страничку.
емейл - БД (авторизация)
логин - Идентификация
пароль - Аутенфикация
куки - в сториджак локал, запрос кука - это инфа о пользователе, это набор символов.
в ЛОКАЛ и куда захочу ().
На сервере токены храняться.
В базах реляционные - отношения, столбцами, чтобы значения соединенит (джоин и юнии)


Кейс: протестируйте домофон.
есть дислей? видео или обычный? обычный
на индикации? трубка? с биометрикой? да, ключ какой: просто код, по биометрии (сетчатка глаза, палец).
Кейс со сброосм
флоу 1: подошли к домофону, ввели код он открылся
флоу 2: сброс параметров, не ту квартиру
флоу 3: магнитной карточкой
4. эквивалентное разбиение
5. граничные значения, ноль и что будет, со *,
А если зажать кнопку, будут ли вводиться цифры?
а если в очках?
1-97,Введи код, нажми В, не дожидаясь поднятия трубки, приложи чип и т.д.

Как тестировать поле номера телефона?	
Требования
Какие символы: минимум/максимум
Спецсимволы: тире, плюс, скобки
Маска ввода номера телефона есть или нету? Какая маска? + 380 (код оператора) и 7 цифр
Узнать валидные цыферки
Понала тестировать:
Позитивные тесты: проверить 
Негативные тесты: невалидные символы, не заполнять это поле, одну цифру ввести, может быть введен валидный код страны и не верный код, пограть с плюсом.

Как тестировать поле NAME?	

Как тестировать поле email?
Унайом требования?
спецсимволы? пробелы?
разбиваем на три части: 

Имя емейла до собаки: .- 2/32. пробел нет, латиница, по реистрозависимости, всё из .-
от 0 до 9, может состоять из йифр, начинаться и заканчиваться со спецсимвола, цифры арвбские
(проверим мин и макс по граничные значения)
ИМЯ ДОМЕНА - мин 3 , макс 15, спецсимврлы .-, только изи спец, цифры те же, пробел нет
НЕ регистрозависимые, только латинские.
ДОМЕННАЯ ЗОНА- от 2 до 5, мнимум собак, точка перед доменной зонной.

Как тестировать поле дату?	
Только числа? нам поле не позволяет вводить другие символы? или валидация сработает, когда уже введем?
02 или 2 вводить?
Требования? Какие символы? есть ли маске? дд. мм. гггг (больше текущей даты нет)
вадидную, анализ граничных по каждому, все нолики, вставлю из буфера обмена, 
несуществующая дата, больше текущей дату, на высокосный год (27,28,29),
все минусы, тире, пробелы. *Чтобы в апреле не было 31 числа.


Кейс: тестируем мусорный бак с ножкой.
ресурс ножки, обьём, материал, гарантия, в каких условиях будет использовать? стресс тестирование - котами, детьми, кто-то зацепил, стеклянная
уборщица; мусорка герметичная или нет? из какого материала она сделана?
_________________________________________________________________________________

*405 код как создать по клиенту? - вызвать неподдерживаемый код, через Постман, Чпрльз Реврайл

Важно*
Если на собесе спрашивают теорию и стоит на своём, то говорить «Если вы хотите так, то так и будем думать»
Если сказала, то опираться на источник*
Говорить теорию и сразу практику
*интернационализация – говорить, что делала на практике
*нагрузочное  - включали нагрузочное и погнали
Докажи разработчику, что это не баг – дать пример;
Произвести впечатление.
Расположить к себе на собесе людей: понравиться как человек, как нейросеть обучается общаться с людьми в различных эмоциональных состояниях. 
Есть люди: с которыми никак, есть человек ок, люди, которые нервируют и я ищу слова как выжатый лимон, люди, с которыми мы встретились и мне в кайф,
 шутки сами по себе, волна для разговора. Насколько ты адаптивный человек, это тренируется через подходы к человеку. Книга – «Теория юмора», *что-то съюморить. 
Сменить тему в стрессе сложно. А чтобы не было стресса, надо чаще быть в этом состоянии.
*знать какой новый функционал выкатыват андроид и Эплы.
*баз фактор - кто-то ушёл и все не знают что делать? 
*Почему люк круглый? чтобы человек пролез.
*Какие последние новости на Сафари?
КАК УСТРОИТЬСЯ НА РАБОТУ?
1. По блату - тоже можно, главное как ты себя там проявишь?
2. по Резюме - контакты почты, конкретно на почту. Один имейл - одна контора = 50 в день.
3. список компаний - уникальное сопроводительное письмо; чем я уникальна? 
4. Лично в Линкедин написать ойчару с сопроводительным и своим сиви
Добрый день! Меня зовут Лена. Хочу работать в Вашей компании. Знаю....
Занималась на курсах
Умею.....
Пользоваться....
Знаю андроид гайдлайны и чёрный пояс по Гугл.
Поэтому, Вы нужны мне, а я Вам.
Хочу работать мануальным 2 года точно, но чтобы задачами автоматизатора. Что 

Самый интерессный баг? рассказать проформу?

Режим Инкогнито в Хроме? Это с кешем, кешируеться временно. В какой момент они чистяться? в момен когда закрываеться 
страничка

__________________________________________________________________________________
Инструменты:
Dbevear - работа с селектом, когда выборка, по номеру, айди;
Свагер - нет лоудера, когда не проходит апи колл
Редис - 
UI Kit - чтобы было UI Kit - елементы интерфейса, хлебные крошки (это со сказки Грета и кто-то, они кидали хлебные крошки, чтобы вернуться домой), 
стандартизация, огромный сайт, чтобы был едиый стить.
Figma - Дизайн Система - это такой гайдлайны
Asset Management 
Фидлер -
__________________________________________________________________________________
Домашка моя:
Еще вопрос на собесе задавали
У тебя есть 2 поля логин, пароль
Требования :
Логин - Емейл
Пароль мин 4 цифры,  Что б была 1 буква и 1 цифра обязательно
Как будешь тестировать? Начинай с емейла
__________________________________________________________________________________
Вопросы от Айчара:

1.Когда был какой-то баг по работе? что сделали? какой урок вынесли?:
оформляли таможенные документы с одним весом, а перевесили с другим, склад загрузил другой.
краска вместо красной на Львовский Бронитанковый заехала не серая грунтовка, а красная.
В итоге:    Я создала файлик с распостаненными проблемами и как их избежать.

2. Опишите случай, когда у тебя был конфликты у Вас с сотрудников?:
было недопонимание, приглашала на разговор тет-а-тет говорили, конструктивный разговор,
решался. На корпоративе вместе в паре.

3. Когда потерпели неудачу? Как решили эту задачу?:
Были технические вызовы, котрые оставила прошлая команда, решали с командой это в субботу. 
Затянули сроки, не так эстимировали, сдали, заказчик был доволен.

4. Что вы узнали о себе за последнюю неделю?
Ничего нового. Что я могу не пить кофе и не ощущать к этому зависимость.

5. Азартный ли ты человек?
Ну в плане стрельбы, там я азартная, могу после 100 патронов ещё 100 попросить, пока не получиться.

6. Что? какие достижения на прошлой работе?
 Повысила статутный капитал и внесла табличку. даже из рутинной задачи
 Стала обучать девочек по видеокурсам, записывала как я это делаю. как туториалы.

 7. Я сейчас изучаю Пайтон в свободное от работы, и могу завтоматизировать регрессию. Это меня прокачает 
 как автоматизатора на будующее. Это даст возможности заменить кого-то взять на себя 
 какие-то функции. 

 8.Как бы провели первую неделю?
 Инструктаж, знакомство с командой, план узнать у ойчара
 попыталась включиться быстрее в проэект, все доступы узнала

9. Как вы будете выбирать если два оффер сразу?
буду смотреть, что ближе, по задачам. и наличие ментора.
зп, коллектива.
Пока не было такого, у меня первый собес.

*профайлинг наука - это аля НЛП 
смотреть прямо в глаза
руки не скрещивать
*Светлана Филатова - чекнуть





